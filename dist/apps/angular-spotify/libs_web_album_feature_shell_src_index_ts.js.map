{"version":3,"file":"libs_web_album_feature_shell_src_index_ts.js","mappings":"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","sources":["./libs/web/album/data-access/src/index.ts","./libs/web/album/data-access/src/lib/store/album/album.store.ts","./libs/web/album/data-access/src/lib/store/album/index.ts","./libs/web/album/data-access/src/lib/store/albums/albums.action.ts","./libs/web/album/data-access/src/lib/store/albums/albums.effect.ts","./libs/web/album/data-access/src/lib/store/albums/albums.reducer.ts","./libs/web/album/data-access/src/lib/store/albums/albums.selector.ts","./libs/web/album/data-access/src/lib/store/albums/index.ts","./libs/web/album/data-access/src/lib/store/index.ts","./libs/web/album/feature/shell/src/index.ts","./libs/web/album/feature/shell/src/lib/album-shell.module.ts"],"sourcesContent":["export * from './lib/store';\n","import { GenericState } from '@angular-spotify/web/shared/data-access/models';\nimport { AlbumApiService, PlayerApiService } from '@angular-spotify/web/shared/data-access/spotify-api';\nimport { PlaybackStore } from '@angular-spotify/web/shared/data-access/store';\nimport { RouterUtil, SelectorUtil } from '@angular-spotify/web/shared/utils';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ComponentStore, tapResponse } from '@ngrx/component-store';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, pluck, switchMap, tap } from 'rxjs/operators';\n\ninterface AlbumState extends GenericState<SpotifyApi.AlbumObjectFull> {\n  albumId: string;\n}\n\n@Injectable()\nexport class AlbumStore extends ComponentStore<AlbumState> {\n  albumIdParams$: Observable<string> = this.route.params.pipe(\n    pluck(RouterUtil.Configuration.AlbumId),\n    filter((albumId: string) => !!albumId)\n  );\n\n  isCurrentAlbumLoading$ = this.select(SelectorUtil.isLoading);\n\n  album$ = this.albumIdParams$.pipe(\n    tap((albumId) => {\n      this.patchState({\n        albumId\n      });\n      this.loadAlbum({ albumId });\n    }),\n    switchMap(() => this.select((s) => s.data))\n  );\n\n  isAlbumPlaying$ = SelectorUtil.getMediaPlayingState(\n    combineLatest([this.album$.pipe(map((album) => album?.uri)), this.playbackStore.playback$])\n  );\n\n  loadAlbum = this.effect<{ albumId: string }>((params$) =>\n    params$.pipe(\n      tap(() => {\n        this.patchState({\n          status: 'loading',\n          error: null\n        });\n      }),\n      switchMap(({ albumId }) =>\n        this.albumApi.getAlbum(albumId).pipe(\n          tapResponse(\n            (album) => {\n              this.patchState({\n                data: album,\n                status: 'success',\n                error: ''\n              });\n            },\n            (error) => {\n              this.patchState({\n                status: 'error',\n                error: error as unknown as string\n              });\n            }\n          )\n        )\n      )\n    )\n  );\n\n  readonly toggleAlbum = this.effect<{ isPlaying: boolean; uri: string }>((params$) =>\n    params$.pipe(\n      switchMap(({ isPlaying, uri }) =>\n        this.playerApi.togglePlay(isPlaying, {\n          context_uri: uri\n        })\n      )\n    )\n  );\n\n  constructor(\n    private route: ActivatedRoute,\n    private playbackStore: PlaybackStore,\n    private albumApi: AlbumApiService,\n    private playerApi: PlayerApiService\n  ) {\n    super(<AlbumState>{});\n  }\n}\n","export * from './album.store';\n","import { createAction, props } from '@ngrx/store';\n\nexport const loadAlbums = createAction('[Albums Page/API]');\n\nexport const loadAlbumsSuccess = createAction(\n  '[Albums Page/API success]',\n  props<{\n    albums: SpotifyApi.UsersSavedAlbumsResponse;\n  }>()\n);\n\nexport const loadAlbumsError = createAction('[Albums Page/API error]', props<{ error: string }>());\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { AlbumApiService } from '@angular-spotify/web/shared/data-access/spotify-api';\nimport { loadAlbums, loadAlbumsSuccess } from './albums.action';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { EMPTY } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class AlbumsEffect {\n  loadAlbums$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadAlbums),\n      switchMap(() =>\n        this.albumApi.getUserSavedAlbums().pipe(\n          map((albums) => loadAlbumsSuccess({ albums })),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private albumApi: AlbumApiService) {}\n}\n","import { GenericState } from '@angular-spotify/web/shared/data-access/models';\nimport { createReducer, on } from '@ngrx/store';\nimport { loadAlbums, loadAlbumsError, loadAlbumsSuccess } from './albums.action';\n\n// eslint-disable-next-line\nexport interface AlbumsState extends GenericState<SpotifyApi.UsersSavedAlbumsResponse> {}\n\nconst initialState: AlbumsState = {\n  data: null,\n  error: null,\n  status: 'pending'\n};\n\nexport const albumsFeatureKey = 'albums';\n\nexport const albumsReducer = createReducer(\n  initialState,\n  on(loadAlbums, (state) => ({\n    ...state,\n    status: 'loading' as const,\n    error: null\n  })),\n  on(loadAlbumsSuccess, (state, { albums }) => ({\n    ...state,\n    data: albums,\n    status: 'success' as const,\n    error: null\n  })),\n  on(loadAlbumsError, (state, { error }) => ({\n    ...state,\n    status: 'error' as const,\n    error\n  }))\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { albumsFeatureKey, AlbumsState } from './albums.reducer';\nimport {SelectorUtil} from '@angular-spotify/web/shared/utils';\n\nexport const getAlbumsState = createFeatureSelector<AlbumsState>(albumsFeatureKey);\n\nexport const getAlbums = createSelector(getAlbumsState, (s) => s.data);\nexport const getAlbumsLoading = createSelector(getAlbumsState, SelectorUtil.isLoading);\n","export * from './albums.action';\nexport * from './albums.reducer';\nexport * from './albums.effect';\nexport * from './albums.selector';\n ","export * from './albums';\nexport * from './album';\n","export * from './lib/album-shell.module';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { RouterUtil } from '@angular-spotify/web/shared/utils';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport {\n  AlbumsEffect,\n  albumsFeatureKey,\n  albumsReducer\n} from '@angular-spotify/web/album/data-access';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        loadChildren: async () =>\n          (await import('@angular-spotify/web/album/feature/list')).AlbumsModule\n      },\n      {\n        path: `:${RouterUtil.Configuration.AlbumId}`,\n        loadChildren: async () =>\n          (await import('@angular-spotify/web/album/feature/detail')).AlbumModule\n      }\n    ]),\n    StoreModule.forFeature(albumsFeatureKey, albumsReducer),\n    EffectsModule.forFeature([AlbumsEffect])\n  ]\n})\nexport class AlbumShellModule {}\n"],"names":["AlbumApiService","PlayerApiService","PlaybackStore","RouterUtil","SelectorUtil","ActivatedRoute","ComponentStore","tapResponse","combineLatest","filter","map","pluck","switchMap","tap","AlbumStore","constructor","route","playbackStore","albumApi","playerApi","albumIdParams$","params","pipe","Configuration","AlbumId","albumId","isCurrentAlbumLoading$","select","isLoading","album$","patchState","loadAlbum","s","data","isAlbumPlaying$","getMediaPlayingState","album","uri","playback$","effect","params$","status","error","getAlbum","toggleAlbum","isPlaying","togglePlay","context_uri","_","i0","ɵɵinject","i1","i2","i3","_2","factory","ɵfac","createAction","props","loadAlbums","loadAlbumsSuccess","loadAlbumsError","Actions","createEffect","ofType","catchError","EMPTY","AlbumsEffect","actions$","loadAlbums$","getUserSavedAlbums","albums","providedIn","createReducer","on","initialState","albumsFeatureKey","albumsReducer","state","createFeatureSelector","createSelector","getAlbumsState","getAlbums","getAlbumsLoading","CommonModule","RouterModule","StoreModule","EffectsModule","AlbumShellModule","_3","forChild","path","loadChildren","_ref","_asyncToGenerator","AlbumsModule","apply","arguments","_ref2","AlbumModule","forFeature","imports","StoreFeatureModule","EffectsFeatureModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}