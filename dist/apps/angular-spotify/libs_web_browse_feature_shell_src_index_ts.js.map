{"version":3,"file":"libs_web_browse_feature_shell_src_index_ts.js","mappings":"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","sources":["./libs/web/browse/data-access/src/index.ts","./libs/web/browse/data-access/src/lib/store/categories/categories.action.ts","./libs/web/browse/data-access/src/lib/store/categories/categories.effect.ts","./libs/web/browse/data-access/src/lib/store/categories/categories.reducer.ts","./libs/web/browse/data-access/src/lib/store/categories/categories.selector.ts","./libs/web/browse/data-access/src/lib/store/categories/index.ts","./libs/web/browse/data-access/src/lib/store/category-playlists/category-playlists.action.ts","./libs/web/browse/data-access/src/lib/store/category-playlists/category-playlists.effect.ts","./libs/web/browse/data-access/src/lib/store/category-playlists/category-playlists.reducer.ts","./libs/web/browse/data-access/src/lib/store/category-playlists/category-playlists.selector.ts","./libs/web/browse/data-access/src/lib/store/category-playlists/index.ts","./libs/web/browse/data-access/src/lib/store/index.ts","./libs/web/browse/feature/shell/src/index.ts","./libs/web/browse/feature/shell/src/lib/browse-shell.module.ts"],"sourcesContent":["export * from './lib/store';\n","import {\n  GenericStoreStatus,\n  SpotifyApiParams\n} from '@angular-spotify/web/shared/data-access/models';\nimport { createAction, props } from '@ngrx/store';\n\nexport const loadCategories = createAction(\n  '[Browse Page]/Load Categories',\n  props<SpotifyApiParams>()\n);\n\nexport const loadCategoriesSuccess = createAction(\n  '[Browse Page/Load Categories Success',\n  props<{\n    categories: SpotifyApi.PagingObject<SpotifyApi.CategoryObject>;\n  }>()\n);\n\nexport const setCategoriesState = createAction(\n  '[Browse Page/Set Categories state status',\n  props<{\n    status: GenericStoreStatus;\n  }>()\n);\n// TODO: Skip load error action, to integrate with toApiResponse operator\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { loadCategories, loadCategoriesSuccess, setCategoriesState } from './categories.action';\nimport { switchMap, map, withLatestFrom, filter, tap } from 'rxjs/operators';\nimport { BrowseApiService } from '@angular-spotify/web/shared/data-access/spotify-api';\nimport { AuthStore } from '@angular-spotify/web/auth/data-access';\nimport { getCategories } from './categories.selector';\nimport { select, Store } from '@ngrx/store';\n\n@Injectable()\nexport class CategoriesEffect {\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadCategories),\n      withLatestFrom(this.store.pipe(select(getCategories))),\n      tap(([, categories]) => {\n        if (categories) {\n          this.store.dispatch(setCategoriesState({ status: 'success' }));\n        }\n      }),\n      filter(([, data]) => !data),\n      withLatestFrom(this.authStore.country$),\n      switchMap(([, country]) =>\n        this.browseApi\n          .getAllCategories({\n            country,\n            limit: 50\n          })\n          .pipe(\n            map((response) =>\n              loadCategoriesSuccess({\n                categories: response\n              })\n            )\n          )\n      )\n    )\n  );\n\n  constructor(\n    private store: Store,\n    private actions$: Actions,\n    private browseApi: BrowseApiService,\n    private authStore: AuthStore\n  ) {}\n}\n","import { GenericState } from '@angular-spotify/web/shared/data-access/models';\nimport { createReducer, on } from '@ngrx/store';\nimport { loadCategories, loadCategoriesSuccess, setCategoriesState } from './categories.action';\nexport const categoriesFeatureKey = 'categories';\n\nexport interface CategoriesState\n  extends GenericState<SpotifyApi.PagingObject<SpotifyApi.CategoryObject>> {\n  map: Map<string, SpotifyApi.CategoryObject>;\n}\n\nconst initialState: CategoriesState = {\n  data: null,\n  status: 'pending',\n  error: null,\n  map: new Map()\n};\n\nexport const categoriesReducer = createReducer(\n  initialState,\n  on(loadCategories, (state) => ({ ...state, status: 'loading' as const })),\n  on(loadCategoriesSuccess, (state, { categories }) => {\n    const { map } = state;\n    categories.items.forEach((category) => {\n      map.set(category.id, category);\n    });\n    return {\n      ...state,\n      status: 'success' as const,\n      data: categories,\n      map: new Map(map)\n    };\n  }),\n  on(setCategoriesState, (state, { status }) => ({ ...state, status }))\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { categoriesFeatureKey, CategoriesState } from './categories.reducer';\nimport { SelectorUtil } from '@angular-spotify/web/shared/utils';\n\nexport const getCategoriesState = createFeatureSelector<CategoriesState>(categoriesFeatureKey);\nexport const getCategories = createSelector(getCategoriesState, (s) => s.data);\nexport const getCategoriesMap = createSelector(getCategoriesState, (s) => s.map);\nexport const getCategoriesLoading = createSelector(getCategoriesState, SelectorUtil.isLoading);\nexport const getCategoryById = (categoryId: string) =>\n  createSelector(getCategoriesMap, (map) => map.get(categoryId));\n","export * from './categories.action';\nexport * from './categories.reducer';\nexport * from './categories.effect';\nexport * from './categories.selector';\n","import { GenericStoreStatus, SpotifyApiParams } from '@angular-spotify/web/shared/data-access/models';\nimport { createAction, props } from '@ngrx/store';\n\nexport const loadCategoryPlaylists = createAction(\n  '[Browse Page]/Load Category Playlist',\n  props<{\n    categoryId: string;\n    params?: SpotifyApiParams;\n  }>()\n);\n\nexport const loadCategoryPlaylistsSuccess = createAction(\n  '[Browse Page/Load Category Playlist Success',\n  props<{\n    categoryId: string;\n    playlists: SpotifyApi.PagingObject<SpotifyApi.PlaylistObjectSimplified>;\n  }>()\n);\n\nexport const setCategoryPlaylistsState = createAction(\n  '[Browse Page/Set Category Playlist state status',\n  props<{\n    status: GenericStoreStatus;\n  }>()\n);\n\n// TODO: Skip load error action, to integrate with toApiResponse operator\n","import { BrowseApiService } from '@angular-spotify/web/shared/data-access/spotify-api';\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { select, Store } from '@ngrx/store';\nimport { EMPTY } from 'rxjs';\nimport { catchError, filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport {\n  loadCategoryPlaylists,\n  loadCategoryPlaylistsSuccess,\n  setCategoryPlaylistsState\n} from './category-playlists.action';\nimport { getCategoryPlaylistsMap } from './category-playlists.selector';\n\n@Injectable()\nexport class CategoryPlaylistsEffect {\n  loadCategoryPlaylists$ = createEffect(() =>\n    this.actions.pipe(\n      ofType(loadCategoryPlaylists),\n      withLatestFrom(this.store.pipe(select(getCategoryPlaylistsMap))),\n      tap(([{ categoryId }, map]) => {\n        if (map?.has(categoryId)) {\n          this.store.dispatch(\n            setCategoryPlaylistsState({\n              status: 'success'\n            })\n          );\n        }\n      }),\n      filter(([{ categoryId }, map]) => {\n        return !map?.has(categoryId);\n      }),\n      switchMap(([{ categoryId }]) =>\n        this.browseApi.getCategoryPlaylists(categoryId).pipe(\n          map((playlists) =>\n            loadCategoryPlaylistsSuccess({\n              categoryId,\n              playlists\n            })\n          ),\n          catchError(() => EMPTY)\n        )\n      )\n    )\n  );\n\n  constructor(\n    private browseApi: BrowseApiService,\n    private actions: Actions,\n    private store: Store\n  ) {}\n}\n","import { GenericState } from '@angular-spotify/web/shared/data-access/models';\nimport { createReducer, on } from '@ngrx/store';\nimport {\n  loadCategoryPlaylists,\n  loadCategoryPlaylistsSuccess,\n  setCategoryPlaylistsState\n} from './category-playlists.action';\n\nexport const categoryPlaylistsFeatureKey = 'categoryPlaylists';\n\nexport type CategoryPlaylistsState = GenericState<\n  Map<string, SpotifyApi.PagingObject<SpotifyApi.PlaylistObjectSimplified>>\n>;\n\nconst initialState: CategoryPlaylistsState = {\n  status: 'pending',\n  data: new Map(),\n  error: null\n};\n\nexport const categoryPlaylistsReducer = createReducer(\n  initialState,\n  on(loadCategoryPlaylists, (state) => ({\n    ...state,\n    status: 'loading' as const\n  })),\n  on(loadCategoryPlaylistsSuccess, (state, { categoryId, playlists }) => {\n    const { data: map } = state;\n    map?.set(categoryId, playlists);\n    return {\n      ...state,\n      data: new Map(map!),\n      status: 'success' as const\n    };\n  }),\n  on(setCategoryPlaylistsState, (state, { status }) => ({ ...state, status }))\n);\n","import { SelectorUtil } from '@angular-spotify/web/shared/utils';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { categoryPlaylistsFeatureKey, CategoryPlaylistsState } from './category-playlists.reducer';\n\nexport const getCategoryPlaylistsState = createFeatureSelector<CategoryPlaylistsState>(\n  categoryPlaylistsFeatureKey\n);\n\nexport const getCategoryPlaylistsLoading = createSelector(\n  getCategoryPlaylistsState,\n  SelectorUtil.isLoading\n);\n\nexport const getCategoryPlaylistsMap = createSelector(getCategoryPlaylistsState, (s) => s.data);\nexport const getCategoryPlaylistsById = (categoryId: string) =>\n  createSelector(getCategoryPlaylistsMap, (map) => {\n    const playlists = map?.get(categoryId);\n    return SelectorUtil.getPlaylistsWithRoute(playlists);\n  });\n","export * from './category-playlists.action';\nexport * from './category-playlists.reducer';\nexport * from './category-playlists.effect';\nexport * from './category-playlists.selector';\n","export * from './categories';\nexport * from './category-playlists';\n","export * from './lib/browse-shell.module';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { RouterUtil } from '@angular-spotify/web/shared/utils';\nimport { StoreModule } from '@ngrx/store';\nimport {\n  CategoriesEffect,\n  categoriesFeatureKey,\n  categoriesReducer,\n  CategoryPlaylistsEffect,\n  categoryPlaylistsFeatureKey,\n  categoryPlaylistsReducer\n} from '@angular-spotify/web/browse/data-access';\nimport { EffectsModule } from '@ngrx/effects';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        loadChildren: async () =>\n          (await import('@angular-spotify/web/browse/feature/categories')).BrowseCategoriesModule\n      },\n      {\n        path: `:${RouterUtil.Configuration.CategoryId}`,\n        loadChildren: async () =>\n          (await import('@angular-spotify/web/browse/feature/category')).BrowseCategoryModule\n      }\n    ]),\n    StoreModule.forFeature(categoriesFeatureKey, categoriesReducer),\n    StoreModule.forFeature(categoryPlaylistsFeatureKey, categoryPlaylistsReducer),\n    EffectsModule.forFeature([CategoriesEffect, CategoryPlaylistsEffect])\n  ]\n})\nexport class BrowseShellModule {}\n"],"names":["createAction","props","loadCategories","loadCategoriesSuccess","setCategoriesState","Actions","createEffect","ofType","switchMap","map","withLatestFrom","filter","tap","BrowseApiService","AuthStore","getCategories","select","Store","CategoriesEffect","constructor","store","actions$","browseApi","authStore","loadCategories$","pipe","categories","dispatch","status","data","country$","country","getAllCategories","limit","response","_","i0","ɵɵinject","i1","i2","i3","i4","_2","factory","ɵfac","createReducer","on","categoriesFeatureKey","initialState","error","Map","categoriesReducer","state","items","forEach","category","set","id","createFeatureSelector","createSelector","SelectorUtil","getCategoriesState","s","getCategoriesMap","getCategoriesLoading","isLoading","getCategoryById","categoryId","get","loadCategoryPlaylists","loadCategoryPlaylistsSuccess","setCategoryPlaylistsState","EMPTY","catchError","getCategoryPlaylistsMap","CategoryPlaylistsEffect","actions","loadCategoryPlaylists$","has","getCategoryPlaylists","playlists","categoryPlaylistsFeatureKey","categoryPlaylistsReducer","getCategoryPlaylistsState","getCategoryPlaylistsLoading","getCategoryPlaylistsById","getPlaylistsWithRoute","CommonModule","RouterModule","RouterUtil","StoreModule","EffectsModule","BrowseShellModule","_3","forChild","path","loadChildren","_ref","_asyncToGenerator","BrowseCategoriesModule","apply","arguments","Configuration","CategoryId","_ref2","BrowseCategoryModule","forFeature","imports","StoreFeatureModule","EffectsFeatureModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}