{"version":3,"sources":["../../src/flags.ts","../../src/zone.ts","../../src/errorhandler.ts","../../src/constants.ts","../../src/tracing.ts","../../src/sdk.ts"],"names":["IS_DEBUG_BUILD","__SENTRY_DEBUG__","isNgZoneEnabled","Zone","current","runOutsideAngular","callback","root","run","isErrorOrErrorLikeObject","value","Error","candidate","isString","name","message","undefined","stack","SentryErrorHandler","options","this","_registeredAfterSendEventHandler","_options","Object","assign","logErrors","prototype","handleError","error","_this","extractedError","_extractError","eventId","captureException","scope","addEventProcessor","event","addExceptionMechanism","type","handled","console","showDialog","client","Sentry","getCurrentHub","getClient","on","showReportDialog","dialogOptions","event_id","extractor","defaultExtractor","_defaultExtractor","bind","errorCandidate","ngOriginalError","tryToUnwrapZonejsError","HttpErrorResponse","ErrorEvent","status","extractHttpModuleError","Injectable","args","providedIn","decorators","Inject","instrumentationInitialized","stashedStartTransaction","stashedStartTransactionOnLocationChange","ANGULAR_INIT_OP","routingInstrumentation","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","WINDOW","location","pathname","op","metadata","source","instrumentAngularRouting","getActiveTransaction","currentHub","getScope","getTransaction","TraceService","_router","navStart$","events","pipe","filter","NavigationStart","tap","navigationEvent","strippedUrl","stripUrlQueryAndFragment","url","activeTransaction","_routingSpan","finish","startChild","description","tags","navigationTrigger","logger","resEnd$","ResolveEnd","route","parts","currentRoute","firstChild","path","routeConfig","push","fullPath","part","join","getParameterizedRouteFromSnapshot","state","transaction","setName","navEnd$","NavigationEnd","_subscription","Subscription","add","subscribe","ngOnDestroy","unsubscribe","Router","TraceDirective","ngOnInit","componentName","_tracingSpan","ngAfterViewInit","Directive","selector","Input","TraceModule","NgModule","declarations","exports","tracingSpan","target","originalOnInit","_i","arguments","length","apply","originalAfterViewInit","propertyKey","descriptor","originalMethod","now","timestampInSeconds","constructor","endTimestamp","ANGULAR_OP","String","startTimestamp","config","ANGULAR_MINIMUM_VERSION","angularVersion","_metadata","sdk","packages","version","SDK_VERSION","VERSION","major","parseInt","warn","setContext","browserInit"],"mappings":"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","sourcesContent":["/*\n * This file defines flags and constants that can be modified during compile time in order to facilitate tree shaking\n * for users.\n *\n * We define \"magic strings\" like `__SENTRY_DEBUG__` that may get replaced with actual values during our, or the user's\n * build process. Take care when introducing new flags - they must not throw if they are not replaced. See the Debug\n * Build Flags section in CONTRIBUTING.md.\n */\n\ndeclare const __SENTRY_DEBUG__: boolean;\n\n/** Flag that is true for debug builds, false otherwise. */\nexport const IS_DEBUG_BUILD = typeof __SENTRY_DEBUG__ === 'undefined' ? true : __SENTRY_DEBUG__;\n","// That's the `global.Zone` exposed when the `zone.js` package is used.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Zone: any;\n\n// There're 2 types of Angular applications:\n// 1) zone-full (by default)\n// 2) zone-less\n// The developer can avoid importing the `zone.js` package and tells Angular that\n// he is responsible for running the change detection by himself. This is done by\n// \"nooping\" the zone through `CompilerOptions` when bootstrapping the root module.\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nconst isNgZoneEnabled = typeof Zone !== 'undefined' && !!Zone.current;\n\n/**\n * The function that does the same job as `NgZone.runOutsideAngular`.\n */\nexport function runOutsideAngular<T>(callback: () => T): T {\n  // The `Zone.root.run` basically will run the `callback` in the most parent zone.\n  // Any asynchronous API used inside the `callback` won't catch Angular's zone\n  // since `Zone.current` will reference `Zone.root`.\n  // The Angular's zone is forked from the `Zone.root`. In this case, `zone.js` won't\n  // trigger change detection, and `ApplicationRef.tick()` will not be run.\n  // Caretaker note: we're using `Zone.root` except `NgZone.runOutsideAngular` since this\n  // will require injecting the `NgZone` facade. That will create a breaking change for\n  // projects already using the `@sentry/angular`.\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return isNgZoneEnabled ? Zone.root.run(callback) : callback();\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport type { ErrorHandler as AngularErrorHandler } from '@angular/core';\nimport { Inject, Injectable } from '@angular/core';\nimport * as Sentry from '@sentry/browser';\nimport { captureException } from '@sentry/browser';\nimport { addExceptionMechanism, isString } from '@sentry/utils';\n\nimport { runOutsideAngular } from './zone';\n\n/**\n * Options used to configure the behavior of the Angular ErrorHandler.\n */\nexport interface ErrorHandlerOptions {\n  logErrors?: boolean;\n  showDialog?: boolean;\n  dialogOptions?: Sentry.ReportDialogOptions;\n  /**\n   * Custom implementation of error extraction from the raw value captured by the Angular.\n   * @param error Value captured by Angular's ErrorHandler provider\n   * @param defaultExtractor Default implementation that can be used as the fallback in case of custom implementation\n   */\n  extractor?(error: unknown, defaultExtractor: (error: unknown) => unknown): unknown;\n}\n\n// https://github.com/angular/angular/blob/master/packages/core/src/util/errors.ts\nfunction tryToUnwrapZonejsError(error: unknown): unknown | Error {\n  // TODO: once Angular14 is the minimum requirement ERROR_ORIGINAL_ERROR and\n  //  getOriginalError from error.ts can be used directly.\n  return error && (error as { ngOriginalError: Error }).ngOriginalError\n    ? (error as { ngOriginalError: Error }).ngOriginalError\n    : error;\n}\n\nfunction extractHttpModuleError(error: HttpErrorResponse): string | Error {\n  // The `error` property of http exception can be either an `Error` object, which we can use directly...\n  if (isErrorOrErrorLikeObject(error.error)) {\n    return error.error;\n  }\n\n  // ... or an`ErrorEvent`, which can provide us with the message but no stack...\n  if (error.error instanceof ErrorEvent && error.error.message) {\n    return error.error.message;\n  }\n\n  // ...or the request body itself, which we can use as a message instead.\n  if (typeof error.error === 'string') {\n    return `Server returned code ${error.status} with body \"${error.error}\"`;\n  }\n\n  // If we don't have any detailed information, fallback to the request message itself.\n  return error.message;\n}\n\ntype ErrorCandidate = {\n  name?: unknown;\n  message?: unknown;\n  stack?: unknown;\n};\n\nfunction isErrorOrErrorLikeObject(value: unknown): value is Error {\n  if (value instanceof Error) {\n    return true;\n  }\n\n  if (value === null || typeof value !== 'object') {\n    return false;\n  }\n\n  const candidate = value as ErrorCandidate;\n\n  return (\n    isString(candidate.name) &&\n    isString(candidate.name) &&\n    isString(candidate.message) &&\n    (undefined === candidate.stack || isString(candidate.stack))\n  );\n}\n\n/**\n * Implementation of Angular's ErrorHandler provider that can be used as a drop-in replacement for the stock one.\n */\n@Injectable({ providedIn: 'root' })\nclass SentryErrorHandler implements AngularErrorHandler {\n  protected readonly _options: ErrorHandlerOptions;\n\n  /* indicates if we already registered our the afterSendEvent handler */\n  private _registeredAfterSendEventHandler = false;\n\n  public constructor(@Inject('errorHandlerOptions') options?: ErrorHandlerOptions) {\n    this._options = {\n      logErrors: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Method called for every value captured through the ErrorHandler\n   */\n  public handleError(error: unknown): void {\n    const extractedError = this._extractError(error) || 'Handled unknown error';\n\n    // Capture handled exception and send it to Sentry.\n    const eventId = runOutsideAngular(() =>\n      captureException(extractedError, scope => {\n        scope.addEventProcessor(event => {\n          addExceptionMechanism(event, {\n            type: 'angular',\n            handled: false,\n          });\n\n          return event;\n        });\n\n        return scope;\n      }),\n    );\n\n    // When in development mode, log the error to console for immediate feedback.\n    if (this._options.logErrors) {\n      // eslint-disable-next-line no-console\n      console.error(extractedError);\n    }\n\n    // Optionally show user dialog to provide details on what happened.\n    if (this._options.showDialog) {\n      const client = Sentry.getCurrentHub().getClient();\n\n      if (client && client.on && !this._registeredAfterSendEventHandler) {\n        client.on('afterSendEvent', event => {\n          if (!event.type) {\n            Sentry.showReportDialog({ ...this._options.dialogOptions, eventId: event.event_id });\n          }\n        });\n\n        // We only want to register this hook once in the lifetime of the error handler\n        this._registeredAfterSendEventHandler = true;\n      } else if (!client || !client.on) {\n        Sentry.showReportDialog({ ...this._options.dialogOptions, eventId });\n      }\n    }\n  }\n\n  /**\n   * Used to pull a desired value that will be used to capture an event out of the raw value captured by ErrorHandler.\n   */\n  protected _extractError(error: unknown): unknown {\n    // Allow custom overrides of extracting function\n    if (this._options.extractor) {\n      const defaultExtractor = this._defaultExtractor.bind(this);\n      return this._options.extractor(error, defaultExtractor);\n    }\n\n    return this._defaultExtractor(error);\n  }\n\n  /**\n   * Default implementation of error extraction that handles default error wrapping, HTTP responses, ErrorEvent and few other known cases.\n   */\n  protected _defaultExtractor(errorCandidate: unknown): unknown {\n    const error = tryToUnwrapZonejsError(errorCandidate);\n\n    // If it's http module error, extract as much information from it as we can.\n    if (error instanceof HttpErrorResponse) {\n      return extractHttpModuleError(error);\n    }\n\n    // We can handle messages and Error objects directly.\n    if (typeof error === 'string' || isErrorOrErrorLikeObject(error)) {\n      return error;\n    }\n\n    // Nothing was extracted, fallback to default error message.\n    return null;\n  }\n}\n\n/**\n * Factory function that creates an instance of a preconfigured ErrorHandler provider.\n */\nfunction createErrorHandler(config?: ErrorHandlerOptions): SentryErrorHandler {\n  return new SentryErrorHandler(config);\n}\n\nexport { createErrorHandler, SentryErrorHandler };\n","export const ANGULAR_ROUTING_OP = 'ui.angular.routing';\n\nexport const ANGULAR_INIT_OP = 'ui.angular.init';\n\nexport const ANGULAR_OP = 'ui.angular';\n","/* eslint-disable max-lines */\nimport type { AfterViewInit, OnDestroy, OnInit } from '@angular/core';\nimport { Directive, Injectable, Input, NgModule } from '@angular/core';\nimport type { ActivatedRouteSnapshot, Event, RouterState } from '@angular/router';\n// Duplicated import to work around a TypeScript bug where it'd complain that `Router` isn't imported as a type.\n// We need to import it as a value to satisfy Angular dependency injection. So:\n// eslint-disable-next-line @typescript-eslint/consistent-type-imports, import/no-duplicates\nimport { Router } from '@angular/router';\n// eslint-disable-next-line import/no-duplicates\nimport { NavigationEnd, NavigationStart, ResolveEnd } from '@angular/router';\nimport { getCurrentHub, WINDOW } from '@sentry/browser';\nimport type { Span, Transaction, TransactionContext } from '@sentry/types';\nimport { logger, stripUrlQueryAndFragment, timestampInSeconds } from '@sentry/utils';\nimport type { Observable } from 'rxjs';\nimport { Subscription } from 'rxjs';\nimport { filter, tap } from 'rxjs/operators';\n\nimport { ANGULAR_INIT_OP, ANGULAR_OP, ANGULAR_ROUTING_OP } from './constants';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { runOutsideAngular } from './zone';\n\nlet instrumentationInitialized: boolean;\nlet stashedStartTransaction: (context: TransactionContext) => Transaction | undefined;\nlet stashedStartTransactionOnLocationChange: boolean;\n\n/**\n * Creates routing instrumentation for Angular Router.\n */\nexport function routingInstrumentation(\n  customStartTransaction: (context: TransactionContext) => Transaction | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  instrumentationInitialized = true;\n  stashedStartTransaction = customStartTransaction;\n  stashedStartTransactionOnLocationChange = startTransactionOnLocationChange;\n\n  if (startTransactionOnPageLoad && WINDOW && WINDOW.location) {\n    customStartTransaction({\n      name: WINDOW.location.pathname,\n      op: 'pageload',\n      metadata: { source: 'url' },\n    });\n  }\n}\n\nexport const instrumentAngularRouting = routingInstrumentation;\n\n/**\n * Grabs active transaction off scope\n */\nexport function getActiveTransaction(): Transaction | undefined {\n  const currentHub = getCurrentHub();\n\n  if (currentHub) {\n    const scope = currentHub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Angular's Service responsible for hooking into Angular Router and tracking current navigation process.\n * Creates a new transaction for every route change and measures a duration of routing process.\n */\n@Injectable({ providedIn: 'root' })\nexport class TraceService implements OnDestroy {\n  public navStart$: Observable<Event> = this._router.events.pipe(\n    filter((event): event is NavigationStart => event instanceof NavigationStart),\n    tap(navigationEvent => {\n      if (!instrumentationInitialized) {\n        IS_DEBUG_BUILD &&\n          logger.error('Angular integration has tracing enabled, but Tracing integration is not configured');\n        return;\n      }\n\n      const strippedUrl = stripUrlQueryAndFragment(navigationEvent.url);\n      let activeTransaction = getActiveTransaction();\n\n      if (!activeTransaction && stashedStartTransactionOnLocationChange) {\n        activeTransaction = stashedStartTransaction({\n          name: strippedUrl,\n          op: 'navigation',\n          metadata: { source: 'url' },\n        });\n      }\n\n      if (activeTransaction) {\n        if (this._routingSpan) {\n          this._routingSpan.finish();\n        }\n        this._routingSpan = activeTransaction.startChild({\n          description: `${navigationEvent.url}`,\n          op: ANGULAR_ROUTING_OP,\n          tags: {\n            'routing.instrumentation': '@sentry/angular',\n            url: strippedUrl,\n            ...(navigationEvent.navigationTrigger && {\n              navigationTrigger: navigationEvent.navigationTrigger,\n            }),\n          },\n        });\n      }\n    }),\n  );\n\n  // The ResolveEnd event is fired when the Angular router has resolved the URL and\n  // the parameter<->value mapping. It holds the new resolved router state with\n  // the mapping and the new URL.\n  // Only After this event, the route is activated, meaning that the transaction\n  // can be updated with the parameterized route name before e.g. the route's root\n  // component is initialized. This should be early enough before outgoing requests\n  // are made from the new route, with the exceptions of requests being made during\n  // a navigation.\n  public resEnd$: Observable<Event> = this._router.events.pipe(\n    filter((event): event is ResolveEnd => event instanceof ResolveEnd),\n    tap(event => {\n      const route = getParameterizedRouteFromSnapshot(\n        (event.state as unknown as RouterState & { root: ActivatedRouteSnapshot }).root,\n      );\n\n      const transaction = getActiveTransaction();\n      // TODO (v8 / #5416): revisit the source condition. Do we want to make the parameterized route the default?\n      if (transaction && transaction.metadata.source === 'url') {\n        transaction.setName(route, 'route');\n      }\n    }),\n  );\n\n  public navEnd$: Observable<Event> = this._router.events.pipe(\n    filter(event => event instanceof NavigationEnd),\n    tap(() => {\n      if (this._routingSpan) {\n        runOutsideAngular(() => {\n          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          this._routingSpan!.finish();\n        });\n        this._routingSpan = null;\n      }\n    }),\n  );\n\n  private _routingSpan: Span | null = null;\n\n  private _subscription: Subscription = new Subscription();\n\n  public constructor(private readonly _router: Router) {\n    this._subscription.add(this.navStart$.subscribe());\n    this._subscription.add(this.resEnd$.subscribe());\n    this._subscription.add(this.navEnd$.subscribe());\n  }\n\n  /**\n   * This is used to prevent memory leaks when the root view is created and destroyed multiple times,\n   * since `subscribe` callbacks capture `this` and prevent many resources from being GC'd.\n   */\n  public ngOnDestroy(): void {\n    this._subscription.unsubscribe();\n  }\n}\n\nconst UNKNOWN_COMPONENT = 'unknown';\n\n/**\n * A directive that can be used to capture initialization lifecycle of the whole component.\n */\n@Directive({ selector: '[trace]' })\nexport class TraceDirective implements OnInit, AfterViewInit {\n  @Input('trace') public componentName?: string;\n\n  private _tracingSpan?: Span;\n\n  /**\n   * Implementation of OnInit lifecycle method\n   * @inheritdoc\n   */\n  public ngOnInit(): void {\n    if (!this.componentName) {\n      this.componentName = UNKNOWN_COMPONENT;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      this._tracingSpan = activeTransaction.startChild({\n        description: `<${this.componentName}>`,\n        op: ANGULAR_INIT_OP,\n      });\n    }\n  }\n\n  /**\n   * Implementation of AfterViewInit lifecycle method\n   * @inheritdoc\n   */\n  public ngAfterViewInit(): void {\n    if (this._tracingSpan) {\n      this._tracingSpan.finish();\n    }\n  }\n}\n\n/**\n * A module serves as a single compilation unit for the `TraceDirective` and can be re-used by any other module.\n */\n@NgModule({\n  declarations: [TraceDirective],\n  exports: [TraceDirective],\n})\nexport class TraceModule {}\n\n/**\n * Decorator function that can be used to capture initialization lifecycle of the whole component.\n */\nexport function TraceClassDecorator(): ClassDecorator {\n  let tracingSpan: Span;\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type\n  return target => {\n    const originalOnInit = target.prototype.ngOnInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngOnInit = function (...args: any[]): ReturnType<typeof originalOnInit> {\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        tracingSpan = activeTransaction.startChild({\n          description: `<${target.name}>`,\n          op: ANGULAR_INIT_OP,\n        });\n      }\n      if (originalOnInit) {\n        return originalOnInit.apply(this, args);\n      }\n    };\n\n    const originalAfterViewInit = target.prototype.ngAfterViewInit;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    target.prototype.ngAfterViewInit = function (...args: any[]): ReturnType<typeof originalAfterViewInit> {\n      if (tracingSpan) {\n        tracingSpan.finish();\n      }\n      if (originalAfterViewInit) {\n        return originalAfterViewInit.apply(this, args);\n      }\n    };\n  };\n  /* eslint-enable @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Decorator function that can be used to capture a single lifecycle methods of the component.\n */\nexport function TraceMethodDecorator(): MethodDecorator {\n  // eslint-disable-next-line @typescript-eslint/explicit-function-return-type, @typescript-eslint/ban-types\n  return (target: Object, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod = descriptor.value;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    descriptor.value = function (...args: any[]): ReturnType<typeof originalMethod> {\n      const now = timestampInSeconds();\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        activeTransaction.startChild({\n          description: `<${target.constructor.name}>`,\n          endTimestamp: now,\n          op: `${ANGULAR_OP}.${String(propertyKey)}`,\n          startTimestamp: now,\n        });\n      }\n      if (originalMethod) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return originalMethod.apply(this, args);\n      }\n    };\n    return descriptor;\n  };\n}\n\n/**\n * Takes the parameterized route from a given ActivatedRouteSnapshot and concatenates the snapshot's\n * child route with its parent to produce the complete parameterized URL of the activated route.\n * This happens recursively until the last child (i.e. the end of the URL) is reached.\n *\n * @param route the ActivatedRouteSnapshot of which its path and its child's path is concatenated\n *\n * @returns the concatenated parameterized route string\n */\nexport function getParameterizedRouteFromSnapshot(route?: ActivatedRouteSnapshot | null): string {\n  const parts: string[] = [];\n\n  let currentRoute = route && route.firstChild;\n  while (currentRoute) {\n    const path = currentRoute && currentRoute.routeConfig && currentRoute.routeConfig.path;\n    if (path === null || path === undefined) {\n      break;\n    }\n\n    parts.push(path);\n    currentRoute = currentRoute.firstChild;\n  }\n\n  const fullPath = parts.filter(part => part).join('/');\n  return fullPath ? `/${fullPath}/` : '/';\n}\n","import { VERSION } from '@angular/core';\nimport type { BrowserOptions } from '@sentry/browser';\nimport { init as browserInit, SDK_VERSION, setContext } from '@sentry/browser';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\n\n/**\n * Inits the Angular SDK\n */\nexport function init(options: BrowserOptions): void {\n  options._metadata = options._metadata || {};\n  options._metadata.sdk = {\n    name: 'sentry.javascript.angular',\n    packages: [\n      {\n        name: 'npm:@sentry/angular',\n        version: SDK_VERSION,\n      },\n    ],\n    version: SDK_VERSION,\n  };\n\n  checkAndSetAngularVersion();\n  browserInit(options);\n}\n\nfunction checkAndSetAngularVersion(): void {\n  const ANGULAR_MINIMUM_VERSION = 10;\n\n  const angularVersion = VERSION && VERSION.major ? parseInt(VERSION.major, 10) : undefined;\n\n  if (angularVersion) {\n    if (angularVersion < ANGULAR_MINIMUM_VERSION) {\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          `The Sentry SDK does not officially support Angular ${angularVersion}.`,\n          `This version of the Sentry SDK supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`,\n          'Please consider upgrading your Angular version or downgrading the Sentry SDK.',\n        );\n    }\n    setContext('angular', { version: angularVersion });\n  }\n}\n"]}