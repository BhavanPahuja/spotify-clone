import { ChangeDetectionStrategy, Component, Inject, Input } from '@angular/core';
import { SVG_ICONS_CONFIG } from './providers';
import * as i0 from "@angular/core";
import * as i1 from "./registry";
export class SvgIconComponent {
    constructor(host, registry, config) {
        this.host = host;
        this.registry = registry;
        this.config = config;
        this.noShrink = false;
        this.init = false;
        this.mergedConfig = this.createConfig();
    }
    get element() {
        return this.host.nativeElement;
    }
    ngOnChanges(changes) {
        if (changes.key) {
            this.setIcon(this.key);
        }
        if (changes.size?.currentValue) {
            this.setIconSize(this.mergedConfig.sizes[this.size]);
        }
        if (changes.fontSize?.currentValue) {
            this.setIconSize(coerceCssPixelValue(this.fontSize));
        }
        // If on the first change no size was passed, set the default size
        if (!this.init && !changes.size?.currentValue && !changes.fontSize?.currentValue) {
            this.setIconSize(this.mergedConfig.sizes[this.mergedConfig.defaultSize || 'md']);
        }
        if (changes.width?.currentValue) {
            this.element.style.width = `var(--svg-icon-width, ${coerceCssPixelValue(this.width)})`;
        }
        if (changes.height?.currentValue) {
            this.element.style.height = `var(--svg-icon-height, ${coerceCssPixelValue(this.height)})`;
        }
        if (changes.color?.currentValue) {
            this.element.style.color = `var(--svg-icon-color, ${this.color})`;
        }
        this.init = true;
    }
    createConfig() {
        const defaults = {
            sizes: {
                xs: '0.5rem',
                sm: '0.75rem',
                md: `1rem`,
                lg: '1.5rem',
                xl: '2rem',
                xxl: '2.5rem',
            },
        };
        const mergedConfig = {
            ...defaults,
            ...this.config,
        };
        mergedConfig.sizes = Object.entries({ ...defaults.sizes, ...mergedConfig.sizes }).reduce((acc, [key, value]) => {
            acc[key] = `var(--svg-icon-font-size-${key}, ${value})`;
            return acc;
        }, {});
        return mergedConfig;
    }
    setIconSize(size) {
        this.element.style.fontSize = size;
        if (this.noShrink) {
            this.element.style.minWidth = size;
        }
    }
    setIcon(name) {
        const config = { preserveAspectRatio: this.preserveAspectRatio };
        const icon = this.registry.get(name, config) ??
            this.registry.get(this.fallback ?? this.config.missingIconFallback?.name, config);
        if (icon) {
            this.element.setAttribute('aria-label', `${name}-icon`);
            this.element.classList.remove(getIconClassName(this.lastKey));
            this.lastKey = name;
            this.element.classList.add(getIconClassName(name));
            this.element.innerHTML = icon;
        }
    }
}
SvgIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: SvgIconComponent, deps: [{ token: i0.ElementRef }, { token: i1.SvgIconRegistry }, { token: SVG_ICONS_CONFIG }], target: i0.ɵɵFactoryTarget.Component });
SvgIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.8", type: SvgIconComponent, isStandalone: true, selector: "svg-icon", inputs: { key: "key", fallback: "fallback", size: "size", width: "width", height: "height", fontSize: "fontSize", color: "color", noShrink: "noShrink", preserveAspectRatio: "preserveAspectRatio" }, host: { attributes: { "role": "img", "aria-hidden": "true" } }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, styles: [":host{display:inline-block;fill:currentColor;width:var(--svg-icon-width, 1em);height:var(--svg-icon-height, 1em)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: SvgIconComponent, decorators: [{
            type: Component,
            args: [{ selector: 'svg-icon', template: '', standalone: true, host: {
                        role: 'img',
                        'aria-hidden': 'true',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-block;fill:currentColor;width:var(--svg-icon-width, 1em);height:var(--svg-icon-height, 1em)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.SvgIconRegistry }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [SVG_ICONS_CONFIG]
                }] }]; }, propDecorators: { key: [{
                type: Input
            }], fallback: [{
                type: Input
            }], size: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], fontSize: [{
                type: Input
            }], color: [{
                type: Input
            }], noShrink: [{
                type: Input
            }], preserveAspectRatio: [{
                type: Input
            }] } });
function coerceCssPixelValue(value) {
    if (value == null) {
        return '';
    }
    return typeof value === 'string' ? value : `${value}px`;
}
function getIconClassName(key) {
    return `svg-icon-${key}`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWljb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmduZWF0L3N2Zy1pY29uL3NyYy9saWIvc3ZnLWljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQWMsTUFBTSxFQUFFLEtBQUssRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHN0csT0FBTyxFQUFjLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDOzs7QUFzQjNELE1BQU0sT0FBTyxnQkFBZ0I7SUFlM0IsWUFDVSxJQUFnQixFQUNoQixRQUF5QixFQUNDLE1BQWtCO1FBRjVDLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDQyxXQUFNLEdBQU4sTUFBTSxDQUFZO1FBVjdDLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFLbEIsU0FBSSxHQUFHLEtBQUssQ0FBQztRQU9uQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUNqQyxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEdBQUcsRUFBRTtZQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRTtZQUM5QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUUsQ0FBQyxDQUFDO1NBQ3ZEO1FBRUQsSUFBSSxPQUFPLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRTtZQUNsQyxJQUFJLENB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QUFHLEtBQUssSUFBSSxDQUFDO0FBQzFELENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLEdBQVc7SUFDbkMsT0FBTyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQzNCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdmdJY29ucyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU3ZnSWNvblJlZ2lzdHJ5IH0gZnJvbSAnLi9yZWdpc3RyeSc7XG5pbXBvcnQgeyBTVkdfQ09ORklHLCBTVkdfSUNPTlNfQ09ORklHIH0gZnJvbSAnLi9wcm92aWRlcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzdmctaWNvbicsXG4gIHRlbXBsYXRlOiAnJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaG9zdDoge1xuICAgIHJvbGU6ICdpbWcnLFxuICAgICdhcmlhLWhpZGRlbic6ICd0cnVlJyxcbiAgfSxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIGZpbGw6IGN1cnJlbnRDb2xvcjtcbiAgICAgICAgd2lkdGg6IHZhcigtLXN2Zy1pY29uLXdpZHRoLCAxZW0pO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLXN2Zy1pY29uLWhlaWdodCwgMWVtKTtcbiAgICAgIH1cbiAgICBgLFxuICBdLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU3ZnSWNvbkNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGtleSE6IFN2Z0ljb25zO1xuICBASW5wdXQoKSBmYWxsYmFjayE6IFN2Z0ljb25zO1xuICBASW5wdXQoKSBzaXplIToga2V5b2YgU1ZHX0NPTkZJR1snc2l6ZXMnXTtcbiAgQElucHV0KCkgd2lkdGghOiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIGhlaWdodCE6IG51bWJlciB8IHN0cmluZztcbiAgQElucHV0KCkgZm9udFNpemUhOiBudW1iZXIgfCBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbG9yITogc3RyaW5nO1xuICBASW5wdXQoKSBub1NocmluayA9IGZhbHNlO1xuICBASW5wdXQoKSBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBtZXJnZWRDb25maWc6IFNWR19DT05GSUc7XG4gIHByaXZhdGUgbGFzdEtleSE6IHN0cmluZztcbiAgcHJpdmF0ZSBpbml0ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBob3N0OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgcmVnaXN0cnk6IFN2Z0ljb25SZWdpc3RyeSxcbiAgICBASW5qZWN0KFNWR19JQ09OU19DT05GSUcpIHByaXZhdGUgY29uZmlnOiBTVkdfQ09ORklHXG4gICkge1xuICAgIHRoaXMubWVyZ2VkQ29uZmlnID0gdGhpcy5jcmVhdGVDb25maWcoKTtcbiAgfVxuXG4gIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMua2V5KSB7XG4gICAgICB0aGlzLnNldEljb24odGhpcy5rZXkpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLnNpemU/LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRJY29uU2l6ZSh0aGlzLm1lcmdlZENvbmZpZy5zaXplc1t0aGlzLnNpemVdISk7XG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZXMuZm9udFNpemU/LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRJY29uU2l6ZShjb2VyY2VDc3NQaXhlbFZhbHVlKHRoaXMuZm9udFNpemUpKTtcbiAgICB9XG5cbiAgICAvLyBJZiBvbiB0aGUgZmlyc3QgY2hhbmdlIG5vIHNpemUgd2FzIHBhc3NlZCwgc2V0IHRoZSBkZWZhdWx0IHNpemVcbiAgICBpZiAoIXRoaXMuaW5pdCAmJiAhY2hhbmdlcy5zaXplPy5jdXJyZW50VmFsdWUgJiYgIWNoYW5nZXMuZm9udFNpemU/LmN1cnJlbnRWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRJY29uU2l6ZSh0aGlzLm1lcmdlZENvbmZpZy5zaXplc1t0aGlzLm1lcmdlZENvbmZpZy5kZWZhdWx0U2l6ZSB8fCAnbWQnXSEpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLndpZHRoPy5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS53aWR0aCA9IGB2YXIoLS1zdmctaWNvbi13aWR0aCwgJHtjb2VyY2VDc3NQaXhlbFZhbHVlKHRoaXMud2lkdGgpfSlgO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLmhlaWdodD8uY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gYHZhcigtLXN2Zy1pY29uLWhlaWdodCwgJHtjb2VyY2VDc3NQaXhlbFZhbHVlKHRoaXMuaGVpZ2h0KX0pYDtcbiAgICB9XG5cbiAgICBpZiAoY2hhbmdlcy5jb2xvcj8uY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuY29sb3IgPSBgdmFyKC0tc3ZnLWljb24tY29sb3IsICR7dGhpcy5jb2xvcn0pYDtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVDb25maWcoKSB7XG4gICAgY29uc3QgZGVmYXVsdHM6IFNWR19DT05GSUcgPSB7XG4gICAgICBzaXplczoge1xuICAgICAgICB4czogJzAuNXJlbScsXG4gICAgICAgIHNtOiAnMC43NXJlbScsXG4gICAgICAgIG1kOiBgMXJlbWAsXG4gICAgICAgIGxnOiAnMS41cmVtJyxcbiAgICAgICAgeGw6ICcycmVtJyxcbiAgICAgICAgeHhsOiAnMi41cmVtJyxcbiAgICAgIH0sXG4gICAgfTtcblxuICAgIGNvbnN0IG1lcmdlZENvbmZpZyA9IHtcbiAgICAgIC4uLmRlZmF1bHRzLFxuICAgICAgLi4udGhpcy5jb25maWcsXG4gICAgfTtcblxuICAgIG1lcmdlZENvbmZpZy5zaXplcyA9IE9iamVjdC5lbnRyaWVzKHsgLi4uZGVmYXVsdHMuc2l6ZXMsIC4uLm1lcmdlZENvbmZpZy5zaXplcyB9KS5yZWR1Y2UoKGFjYywgW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBhY2Nba2V5XSA9IGB2YXIoLS1zdmctaWNvbi1mb250LXNpemUtJHtrZXl9LCAke3ZhbHVlfSlgO1xuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9IGFzIFNWR19DT05GSUdbJ3NpemVzJ10pO1xuXG4gICAgcmV0dXJuIG1lcmdlZENvbmZpZztcbiAgfVxuXG4gIHByaXZhdGUgc2V0SWNvblNpemUoc2l6ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5lbGVtZW50LnN0eWxlLmZvbnRTaXplID0gc2l6ZTtcbiAgICBpZiAodGhpcy5ub1Nocmluaykge1xuICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLm1pbldpZHRoID0gc2l6ZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHNldEljb24obmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgY29uZmlnID0geyBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiB0aGlzLnByZXNlcnZlQXNwZWN0UmF0aW8gfTtcbiAgICBjb25zdCBpY29uID1cbiAgICAgIHRoaXMucmVnaXN0cnkuZ2V0KG5hbWUsIGNvbmZpZykgPz9cbiAgICAgIHRoaXMucmVnaXN0cnkuZ2V0KHRoaXMuZmFsbGJhY2sgPz8gdGhpcy5jb25maWcubWlzc2luZ0ljb25GYWxsYmFjaz8ubmFtZSwgY29uZmlnKTtcblxuICAgIGlmIChpY29uKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgYCR7bmFtZX0taWNvbmApO1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoZ2V0SWNvbkNsYXNzTmFtZSh0aGlzLmxhc3RLZXkpKTtcbiAgICAgIHRoaXMubGFzdEtleSA9IG5hbWU7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZChnZXRJY29uQ2xhc3NOYW1lKG5hbWUpKTtcbiAgICAgIHRoaXMuZWxlbWVudC5pbm5lckhUTUwgPSBpY29uO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb2VyY2VDc3NQaXhlbFZhbHVlKHZhbHVlOiBhbnkpOiBzdHJpbmcge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBgJHt2YWx1ZX1weGA7XG59XG5cbmZ1bmN0aW9uIGdldEljb25DbGFzc05hbWUoa2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGBzdmctaWNvbi0ke2tleX1gO1xufVxuIl19