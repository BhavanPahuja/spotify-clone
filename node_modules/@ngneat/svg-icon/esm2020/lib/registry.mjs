import { DOCUMENT } from '@angular/common';
import { forwardRef, inject, Inject, Injectable } from '@angular/core';
import { SVG_ICONS_CONFIG } from './providers';
import * as i0 from "@angular/core";
class SvgIcon {
    constructor(content) {
        this.content = content;
        this.init = false;
    }
}
export class SvgIconRegistry {
    constructor(config) {
        this.svgMap = new Map();
        this.document = inject(DOCUMENT);
        if (config?.icons) {
            this.register(config.icons);
        }
        if (config?.missingIconFallback) {
            this.register(config.missingIconFallback);
        }
    }
    getAll() {
        return this.svgMap;
    }
    get(key, config = {}) {
        const icon = key && this.svgMap.get(key);
        if (!icon) {
            return undefined;
        }
        if (!icon.init) {
            const svg = this.toElement(icon.content);
            svg.setAttribute('fit', '');
            svg.setAttribute('height', '100%');
            svg.setAttribute('width', '100%');
            svg.setAttribute('preserveAspectRatio', config.preserveAspectRatio ?? 'xMidYMid meet');
            svg.setAttribute('focusable', 'false');
            icon.content = svg.outerHTML;
            icon.init = true;
        }
        if (config.asDataUrl) {
            const svg = this.toElement(icon.content).outerHTML;
            return `data:image/svg+xml;base64,${btoa(svg)}`;
        }
        return icon.content;
    }
    register(icons) {
        for (const { name, data } of Array.isArray(icons) ? icons : [icons]) {
            if (!this.svgMap.has(name)) {
                this.svgMap.set(name, new SvgIcon(data));
            }
        }
    }
    getSvgElement(name) {
        const content = this.get(name);
        if (!content) {
            return undefined;
        }
        const div = this.document.createElement('div');
        div.innerHTML = content;
        return div.querySelector('svg');
    }
    toElement(content) {
        const div = this.document.createElement('div');
        div.innerHTML = content;
        return div.querySelector('svg');
    }
}
SvgIconRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: SvgIconRegistry, deps: [{ token: forwardRef(() => SVG_ICONS_CONFIG) }], target: i0.ɵɵFactoryTarget.Injectable });
SvgIconRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: SvgIconRegistry, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.8", ngImport: i0, type: SvgIconRegistry, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => SVG_ICONS_CONFIG)]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0cnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ25lYXQvc3ZnLWljb24vc3JjL2xpYi9yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV2RSxPQUFPLEVBQWMsZ0JBQWdCLEVBQWUsTUFBTSxhQUFhLENBQUM7O0FBRXhFLE1BQU0sT0FBTztJQUdYLFlBQW1CLE9BQWU7UUFBZixZQUFPLEdBQVAsT0FBTyxDQUFRO1FBRmxDLFNBQUksR0FBRyxLQUFLLENBQUM7SUFFd0IsQ0FBQztDQUN2QztBQUdELE1BQU0sT0FBTyxlQUFlO0lBSTFCLFlBQXdELE1BQWtCO1FBSGxFLFdBQU0sR0FBRyxJQUFJLEdBQUcsRUFBbUIsQ0FBQztRQUNwQyxhQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBR2xDLElBQUksTUFBTSxFQUFFLEtBQUssRUFBRTtZQUNqQixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjtRQUVELElBQUksTUFBTSxFQUFFLG1CQUFtQixFQUFFO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDM0M7SUFDSCxDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBRUQsR0FBRyxDQUFDLEdBQXVCLEVBQUUsU0FBZ0UsRUFBRTtRQUM3RixNQUFNLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sU0FBUyxDQUFDO1NBQ2xCO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QyxHQUFHLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUM1QixHQUFHLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNuQyxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNsQyxHQUFHLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsSUFBSSxlQUFlLENBQUMsQ0FBQztZQUN2RixHQUFHLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUV2QyxJQUFJLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUM7WUFDN0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7UUFFRCxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDcEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBRW5ELE9BQU8sNkJBQTZCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFBO1NBQ2hEO1FBRUQsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxRQUFRLENBQUMsS0FBa0M7UUFDekMsS0FBSyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2FBQzFDO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQVk7UUFDeEIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUvQixJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUV4QixPQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFrQixDQUFDO0lBQ25ELENBQUM7SUFFTyxTQUFTLENBQUMsT0FBZTtRQUMvQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQztRQUV4QixPQUFPLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFlLENBQUM7SUFDaEQsQ0FBQzs7NEdBeEVVLGVBQWUsa0JBSU4sVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO2dIQUozQyxlQUFlLGNBREYsTUFBTTsyRkFDbkIsZUFBZTtrQkFEM0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7OzBCQUtuQixNQUFNOzJCQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGZvcndhcmRSZWYsIGluamVjdCwgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFNWR19DT05GSUcsIFNWR19JQ09OU19DT05GSUcsIFN2Z0ljb25UeXBlIH0gZnJvbSAnLi9wcm92aWRlcnMnO1xuXG5jbGFzcyBTdmdJY29uIHtcbiAgaW5pdCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb250ZW50OiBzdHJpbmcpIHt9XG59XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgU3ZnSWNvblJlZ2lzdHJ5IHtcbiAgcHJpdmF0ZSBzdmdNYXAgPSBuZXcgTWFwPHN0cmluZywgU3ZnSWNvbj4oKTtcbiAgcHJpdmF0ZSBkb2N1bWVudCA9IGluamVjdChET0NVTUVOVCk7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChmb3J3YXJkUmVmKCgpID0+IFNWR19JQ09OU19DT05GSUcpKSBjb25maWc6IFNWR19DT05GSUcpIHtcbiAgICBpZiAoY29uZmlnPy5pY29ucykge1xuICAgICAgdGhpcy5yZWdpc3Rlcihjb25maWcuaWNvbnMpO1xuICAgIH1cblxuICAgIGlmIChjb25maWc/Lm1pc3NpbmdJY29uRmFsbGJhY2spIHtcbiAgICAgIHRoaXMucmVnaXN0ZXIoY29uZmlnLm1pc3NpbmdJY29uRmFsbGJhY2spO1xuICAgIH1cbiAgfVxuXG4gIGdldEFsbCgpIHtcbiAgICByZXR1cm4gdGhpcy5zdmdNYXA7XG4gIH1cblxuICBnZXQoa2V5OiBzdHJpbmcgfCB1bmRlZmluZWQsIGNvbmZpZzogeyBwcmVzZXJ2ZUFzcGVjdFJhdGlvPzogc3RyaW5nLCBhc0RhdGFVcmw/OiBib29sZWFuIH0gPSB7fSk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgaWNvbiA9IGtleSAmJiB0aGlzLnN2Z01hcC5nZXQoa2V5KTtcblxuICAgIGlmICghaWNvbikge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoIWljb24uaW5pdCkge1xuICAgICAgY29uc3Qgc3ZnID0gdGhpcy50b0VsZW1lbnQoaWNvbi5jb250ZW50KTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2ZpdCcsICcnKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcxMDAlJyk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxMDAlJyk7XG4gICAgICBzdmcuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgY29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8gPz8gJ3hNaWRZTWlkIG1lZXQnKTtcbiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ2ZvY3VzYWJsZScsICdmYWxzZScpO1xuXG4gICAgICBpY29uLmNvbnRlbnQgPSBzdmcub3V0ZXJIVE1MO1xuICAgICAgaWNvbi5pbml0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmFzRGF0YVVybCkge1xuICAgICAgY29uc3Qgc3ZnID0gdGhpcy50b0VsZW1lbnQoaWNvbi5jb250ZW50KS5vdXRlckhUTUw7XG5cbiAgICAgIHJldHVybiBgZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCwke2J0b2Eoc3ZnKX1gXG4gICAgfVxuXG4gICAgcmV0dXJuIGljb24uY29udGVudDtcbiAgfVxuXG4gIHJlZ2lzdGVyKGljb25zOiBTdmdJY29uVHlwZSB8IFN2Z0ljb25UeXBlW10pIHtcbiAgICBmb3IgKGNvbnN0IHsgbmFtZSwgZGF0YSB9IG9mIEFycmF5LmlzQXJyYXkoaWNvbnMpID8gaWNvbnMgOiBbaWNvbnNdKSB7XG4gICAgICBpZiAoIXRoaXMuc3ZnTWFwLmhhcyhuYW1lKSkge1xuICAgICAgICB0aGlzLnN2Z01hcC5zZXQobmFtZSwgbmV3IFN2Z0ljb24oZGF0YSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFN2Z0VsZW1lbnQobmFtZTogc3RyaW5nKTogU1ZHU1ZHRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgY29udGVudCA9IHRoaXMuZ2V0KG5hbWUpO1xuXG4gICAgaWYgKCFjb250ZW50KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGNvbnN0IGRpdiA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2LmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cbiAgICByZXR1cm4gZGl2LnF1ZXJ5U2VsZWN0b3IoJ3N2ZycpIGFzIFNWR1NWR0VsZW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIHRvRWxlbWVudChjb250ZW50OiBzdHJpbmcpOiBTVkdFbGVtZW50IHtcbiAgICBjb25zdCBkaXYgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdi5pbm5lckhUTUwgPSBjb250ZW50O1xuXG4gICAgcmV0dXJuIGRpdi5xdWVyeVNlbGVjdG9yKCdzdmcnKSBhcyBTVkdFbGVtZW50O1xuICB9XG59XG4iXX0=