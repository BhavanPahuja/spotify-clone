"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateSVGIcons = void 0;
const glob_1 = __importDefault(require("glob"));
const path_1 = require("path");
const fs_extra_1 = require("fs-extra");
const config_1 = require("./config");
const tree_1 = require("./tree");
const create_types_1 = require("./create-types");
function skipLintAndTsChecks(fileContent) {
    return `// @ts-nocheck\n/* eslint-disable */\n${fileContent}`;
}
function generateSVGIcons(config) {
    if (!config) {
        console.log(`Can't find a config object!`);
        process.exit();
    }
    const mergedConfig = Object.assign(Object.assign({}, config_1.defaultConfig), config);
    removeOldIcons((0, path_1.resolve)(mergedConfig.outputPath));
    const virtualTree = (0, tree_1.createTree)(mergedConfig.srcPath, mergedConfig.outputPath, mergedConfig);
    let names = [];
    if (mergedConfig.rootBarrelFile) {
        const allExports = virtualTree
            .filter(({ name }) => name !== tree_1.INDEX)
            .map(({ content }) => content)
            .join('\n\n');
        (0, fs_extra_1.outputFileSync)((0, path_1.join)(mergedConfig.outputPath, `${mergedConfig.rootBarrelFileName}.ts`), skipLintAndTsChecks(allExports), {
            encoding: 'utf-8',
        });
        names = virtualTree.filter(({ name }) => name !== tree_1.INDEX).map(({ name }) => name);
    }
    else {
        virtualTree.forEach(({ path, content, name }) => {
            name !== tree_1.INDEX && names.push(name);
            (0, fs_extra_1.outputFileSync)(path, skipLintAndTsChecks(content), { encoding: 'utf-8' });
        });
    }
    const typeFilePath = (0, path_1.resolve)(process.cwd(), 'node_modules', '@ngneat', 'svg-icon', 'lib', 'types.d.ts');
    (0, fs_extra_1.outputFileSync)(typeFilePath, (0, create_types_1.createTypeFile)(names), {
        encoding: 'utf-8',
    });
    console.log(`ðŸš€ SvgIcons type was updated successfully`);
}
exports.generateSVGIcons = generateSVGIcons;
function removeOldIcons(outputPath) {
    glob_1.default.sync(`${outputPath}/**/*.ts`).forEach((file) => (0, fs_extra_1.unlinkSync)(file));
}
